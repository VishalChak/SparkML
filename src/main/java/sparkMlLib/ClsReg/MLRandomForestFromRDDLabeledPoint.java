package sparkMlLib.ClsReg;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.api.java.function.VoidFunction;
import org.apache.spark.ml.attribute.NominalAttribute;
import org.apache.spark.ml.classification.RandomForestClassificationModel;
import org.apache.spark.ml.classification.RandomForestClassifier;
import org.apache.spark.mllib.linalg.VectorUDT;
import org.apache.spark.mllib.regression.LabeledPoint;
import org.apache.spark.mllib.util.MLUtils;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.RowFactory;
import org.apache.spark.sql.SQLContext;
import org.apache.spark.sql.types.DataTypes;
import org.apache.spark.sql.types.MetadataBuilder;
import org.apache.spark.sql.types.StructField;
import org.apache.spark.sql.types.StructType;

/**
 * Class to work through the process of loading a {@link LabeledPoint}-compatible file (sample_libsvm_data.txt)
 * into a {@link DataFrame} that can be used to train a {@link RandomForestClassificationModel}.<br>
 * <b>Note:<b/> The {@link DataFrame} {@link StructType schma} generated by reflection is immutable
 * and does not include the number of labels, causing the {@link RandomForestClassifier} to throw
 * a constraint violation exception. 
 * <pre>
  DataFrame dataFrame = sqlContext.createDataFrame(data, LabeledPoint.class); // XXX Throws Exception during training
  </pre>
 */
public class MLRandomForestFromRDDLabeledPoint {

	public static void main(String[] args) throws Exception {
		String datapath = args.length>0 
			? args[0] 
			: "D:\\Vishal\\spark\\data/mllib/sample_libsvm_data.txt";
		
		SparkConf sparkConf = new SparkConf().setAppName(MLRandomForestFromRDDLabeledPoint.class.getName());
		sparkConf.setMaster("local");
		JavaSparkContext sc = new JavaSparkContext(sparkConf);

		// Load and parse the data file. 
		System.out.println("Loading Data from "+datapath);
		JavaRDD<LabeledPoint> data = MLUtils.loadLibSVMFile(sc.sc(), datapath).toJavaRDD();
		data.foreach(new VoidFunction<LabeledPoint>() {
			
			@Override
			public void call(LabeledPoint arg0) throws Exception {
				System.out.println(arg0 +"----");
				
			}
		});

		// Converting RDD<LabeledPoint> to RDD<Row>");
		JavaRDD<Row> rows = data.map(point -> RowFactory.create(point.label(), point.features()));		
//		ro
		// Converting RDD<Row> to DataFrame<Double,Vector>
		String[] labels = {"0","1"};				
		StructType schema = DataTypes.createStructType(new StructField[]{
			new StructField("label", DataTypes.DoubleType, false, new MetadataBuilder().build()),
			new StructField("features", new VectorUDT(), false, new MetadataBuilder().build())
		});		
		SQLContext sqlContext = SQLContext.getOrCreate(sc.sc());
		Dataset<Row> dataFrame = sqlContext.createDataFrame(rows, schema);
		dataFrame.show();
		
		// Training RandomForestClassificationModel
//		RandomForestClassificationModel model = new RandomForestClassifier().train(dataFrame);
		
		// Predict the classification of the training data
//		data.foreach(row -> System.out.println("Label: "+row.label()+" Prediction: "+model.predict(row.features())));
		
		sc.close();
	}
}